// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Pin pin
// swagger:model pin
type Pin struct {

	// description
	// Min Length: 1
	Description string `json:"description,omitempty"`

	// id
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// image url
	// Min Length: 1
	ImageURL string `json:"image_url,omitempty"`

	// posted by
	// Min Length: 1
	PostedBy string `json:"posted_by,omitempty"`

	// source url
	// Min Length: 1
	SourceURL string `json:"source_url,omitempty"`

	// title
	// Min Length: 1
	Title string `json:"title,omitempty"`
}

// Validate validates this pin
func (m *Pin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pin) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(m.Description), 1); err != nil {
		return err
	}

	return nil
}

func (m *Pin) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	return nil
}

func (m *Pin) validateImageURL(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageURL) { // not required
		return nil
	}

	if err := validate.MinLength("image_url", "body", string(m.ImageURL), 1); err != nil {
		return err
	}

	return nil
}

func (m *Pin) validatePostedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.PostedBy) { // not required
		return nil
	}

	if err := validate.MinLength("posted_by", "body", string(m.PostedBy), 1); err != nil {
		return err
	}

	return nil
}

func (m *Pin) validateSourceURL(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceURL) { // not required
		return nil
	}

	if err := validate.MinLength("source_url", "body", string(m.SourceURL), 1); err != nil {
		return err
	}

	return nil
}

func (m *Pin) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MinLength("title", "body", string(m.Title), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Pin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Pin) UnmarshalBinary(b []byte) error {
	var res Pin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
